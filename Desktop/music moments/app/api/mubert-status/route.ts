import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const taskId = searchParams.get('taskId')
    
    if (!taskId) {
      return NextResponse.json(
        { error: 'Task ID is required' },
        { status: 400 }
      )
    }
    
    console.log('üîç Checking Mubert task status:', taskId)
    
    // Check if this is a demo task
    if (taskId.startsWith('mubert-demo-')) {
      console.log('üß™ Demo mode - returning completed status')
      return NextResponse.json({
        status: 'complete',
        audioUrl: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-8.mp3',
        coverUrl: 'https://picsum.photos/400/400?random=' + taskId.slice(-4),
        title: 'AI Generated Music (Demo)',
        artist: 'Mubert AI (Demo Mode)',
        attribution: 'Music by Mubert AI - Demo Mode (Get real API key for production)',
        isDemoMode: true
      })
    }
    
    // Real Mubert API call to check task status
    const response = await fetch('https://api-b2b.mubert.com/v2/CheckTask', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        method: 'CheckTask',
        params: {
          pat: process.env.MUBERT_PAT || 'demo',
          task_id: taskId
        }
      })
    })
    
    if (!response.ok) {
      console.error('Mubert status API error:', response.status, await response.text())
      throw new Error(`Mubert status API error: ${response.status}`)
    }
    
    const data = await response.json()
    console.log('Mubert status response:', data)
    
    if (data.status === 1 && data.data) {
      const task = data.data
      
      // Check task status
      if (task.status === 'finished' && task.result && task.result.audio_url) {
        return NextResponse.json({
          status: 'complete',
          audioUrl: task.result.audio_url,
          coverUrl: 'https://picsum.photos/400/400?random=' + Math.floor(Math.random() * 1000),
          title: 'AI Generated Music',
          artist: 'Mubert AI',
          attribution: 'Music generated by Mubert AI - mubert.com',
          duration: task.result.duration || 60
        })
      } else if (task.status === 'error') {
        return NextResponse.json({
          status: 'error',
          error: task.error || 'Music generation failed'
        })
      } else {
        // Still processing
        return NextResponse.json({
          status: 'processing',
          progress: task.progress || 50
        })
      }
    } else {
      throw new Error('Invalid Mubert status response')
    }
    
  } catch (error) {
    console.error('Mubert status API error:', error)
    
    return NextResponse.json(
      { error: 'Failed to check status' },
      { status: 500 }
    )
  }
}
